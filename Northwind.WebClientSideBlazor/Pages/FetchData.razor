@page "/fetchdata"
@using System;
@using System.Net.Http;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@using System.Text;
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@using Microsoft.Extensions.Configuration;
@using Microsoft.Extensions.DependencyInjection;
@using Microsoft.Extensions.Logging;
@using Northwind.Repository;
@using System.Linq.Expressions;
@using System.Linq;

@inject HttpClient Http


<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (orderItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ProductName</th>
                <th>Quantity</th>
                <th>UnitPrice</th>
                <th>OrderDate</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in orderItems)
            {
                <tr>
                    <td>@item.Product.ProductName</td>
                    <td>@item.Quantity</td>
                    <td>@item.UnitPrice</td>
                    <td>@item.Order.OrderDate</td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{

    public OrderDetail[] orderItems = null;



    protected override async Task OnInitializedAsync()
    {

        //System.Linq.Expressions.Expression<Func<OrderDetail, OrderDetail[]>> exps =

        orderItems = new OrderDetail[] { new OrderDetail
        {
             Product = new Product
            {
                            ProductName = "Sir Rodney's Marmalade",
            Category = new Category
            {
                  CategoryName = "Confections"
            } ,
            Supplier = new Supplier
        {
            CompanyName = "Specialty Biscuits, Ltd.",
            ContactTitle = "Sales Representative",
            Country = "UK"
        }
            },
            UnitPrice = 64.80M,
            Quantity = 6,
            Discount = 0,
            Order = new Order
        {
            Employee = new Employee
            {
                EmployeeId = 6,
                FirstName = "Michael",
                LastName = "Suyama"
            },
            ShipName = "Rattlesnake Canyon Grocery",
            ShippedDate = new DateTime(1996, 8, 6)
        }
        } };

        await base.OnInitializedAsync();
    }

}




@*new OrderDetail
    {
        Product=
        {
            ProductName="Jack's New England Clam Chowder",
            Category=
            {
                CategoryName="Seafood"
            },
            Supplier=
            {
                CompanyName="New England Seafood Cannery",ContactTitle="Wholesale Account Agent", Country="USA"
            }
        },
        UnitPrice=7.70M,Quantity=10,Discount=0,
        Order=
        {
            Employee=
            {
                EmployeeId=4,FirstName="Margaret",LastName="Peacock",
                ReportsToNavigation=
                {
                    ReportsTo=null,FirstName="Andrew",LastName="Fuller"
                }
            },
            ShipName="Hanari Carnes", ShippedDate=new DateTime(1996,7,12)}
    },
    new OrderDetail
    {
        Product=
        {
            ProductName="Geitost",
            Category=
            {
                CategoryName="Dairy Products"
            },
            Supplier=
            {
                CompanyName="Norske Meierier", ContactTitle="Marketing Manager",Country="Norway"
            }
        },
        UnitPrice=2.00M, Quantity=25, Discount=0.05F,
        Order=
        {
            Employee=
            {
                EmployeeId=4, FirstName="Margaret", LastName="Peacock",
                ReportsToNavigation=
                {
                    ReportsTo=null, FirstName="Andrew", LastName="Fuller"
                }
            },
            ShipName="Suprêmes délices", ShippedDate=new DateTime(1996,11,7)
        }
    }*@





@*@page "/fetchdata"
    @inject HttpClient Http

    <h1>Weather forecast</h1>

    <p>This component demonstrates fetching data from the server.</p>

    @if (forecasts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @code {
        private WeatherForecast[] forecasts;

        protected override async Task OnInitializedAsync()
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        }

        public class WeatherForecast
        {
            public DateTime Date { get; set; }

            public int TemperatureC { get; set; }

            public string Summary { get; set; }

            public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
        }
    }*@
